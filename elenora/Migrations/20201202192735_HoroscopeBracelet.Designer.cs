// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using elenora;

namespace elenora.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201202192735_HoroscopeBracelet")]
    partial class HoroscopeBracelet
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("elenora.BusinessModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CatalogImage1")
                        .HasColumnType("text");

                    b.Property<string>("CatalogImage2")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("Featured")
                        .HasColumnType("boolean");

                    b.Property<string>("HtmlDescription")
                        .HasColumnType("text");

                    b.Property<string>("IdString")
                        .HasColumnType("text");

                    b.Property<int>("ListOrder")
                        .HasColumnType("integer");

                    b.Property<string>("MainImage")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer");

                    b.Property<string>("SecondaryName")
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("elenora.Models.ActionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceType")
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Referrer")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ActionLogs");
                });

            modelBuilder.Entity("elenora.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddressLine")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("elenora.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IdString")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("elenora.Models.BeadComplementaryProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ComplementaryProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComplementaryProductId");

                    b.HasIndex("ComponentId");

                    b.ToTable("BeadComplementaryProducts");
                });

            modelBuilder.Entity("elenora.Models.BraceletPreviewRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BraceletImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int?>("EmailAddressId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmailAddressId");

                    b.ToTable("BraceletPreviewRequests");
                });

            modelBuilder.Entity("elenora.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CouponId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("ShippingMethod")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("elenora.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CartItem");
                });

            modelBuilder.Entity("elenora.Models.CartItemComplementaryProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CartItemId")
                        .HasColumnType("integer");

                    b.Property<int>("ComplementaryProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartItemId");

                    b.HasIndex("ComplementaryProductId");

                    b.ToTable("CartItemComplementaryProducts");
                });

            modelBuilder.Entity("elenora.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IdString")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("elenora.Models.Chakra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("IdString")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Chakras");
                });

            modelBuilder.Entity("elenora.Models.ComplementaryProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ComplementaryProducts");
                });

            modelBuilder.Entity("elenora.Models.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ComponentFamilyId")
                        .HasColumnType("integer");

                    b.Property<float>("HeightRatio")
                        .HasColumnType("real");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<bool>("SelectabeInBraceletDesigner")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowInMineralsList")
                        .HasColumnType("boolean");

                    b.Property<bool>("SoldOutInBraceletDesigner")
                        .HasColumnType("boolean");

                    b.Property<float>("WidthRatio")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ComponentFamilyId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("elenora.Models.ComponentFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ArticlesDescription")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ComponentFamilies");
                });

            modelBuilder.Entity("elenora.Models.ComponentFamilyChakra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChakraId")
                        .HasColumnType("integer");

                    b.Property<int>("ComponentFamilyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChakraId");

                    b.HasIndex("ComponentFamilyId");

                    b.ToTable("ComponentFamilyChakras");
                });

            modelBuilder.Entity("elenora.Models.ComponentFamilyHoroscope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ComponentFamilyId")
                        .HasColumnType("integer");

                    b.Property<int>("HoroscopeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComponentFamilyId");

                    b.HasIndex("HoroscopeId");

                    b.ToTable("ComponentFamilyHoroscopes");
                });

            modelBuilder.Entity("elenora.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GetOneFreeMinimumQuantity")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxUsageCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MinCartValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Percentage")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("elenora.Models.CustomBraceletComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CartItemId")
                        .HasColumnType("integer");

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartItemId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("CustomBraceletComponents");
                });

            modelBuilder.Entity("elenora.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CartId")
                        .HasColumnType("integer");

                    b.Property<string>("CookieId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int?>("EmailAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Referrer")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReviewEmailSent")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddressId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("elenora.Models.CustomerPopupStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PopupActionExecutedCount")
                        .HasColumnType("integer");

                    b.Property<string>("PopupDisplayRemark")
                        .HasColumnType("text");

                    b.Property<int>("PopupDisplayedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("PopupId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PopupLastDisplayed")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PopupId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("elenora.Models.EmailAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<bool>("Unsubscribed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("elenora.Models.EmailHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EmailAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("EmailTemplateId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Unsubscribed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddressId");

                    b.HasIndex("EmailTemplateId");

                    b.ToTable("EmailHistories");
                });

            modelBuilder.Entity("elenora.Models.EmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BodyHtml")
                        .HasColumnType("text");

                    b.Property<string>("BodyText")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int?>("EmailAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddressId");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("elenora.Models.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HtmlContent")
                        .HasColumnType("text");

                    b.Property<int?>("OnlyAfterEmailId")
                        .HasColumnType("integer");

                    b.Property<int>("OnlyAfterMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("TextContent")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OnlyAfterEmailId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("elenora.Models.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<int>("BraceletDesignerOpenCount")
                        .HasColumnType("integer");

                    b.Property<int>("BraceletDesignerOrder")
                        .HasColumnType("integer");

                    b.Property<int>("CartPageOpenCount")
                        .HasColumnType("integer");

                    b.Property<int>("CartPageOrder")
                        .HasColumnType("integer");

                    b.Property<int>("FaqPageOpenCount")
                        .HasColumnType("integer");

                    b.Property<int>("FaqPageOrder")
                        .HasColumnType("integer");

                    b.Property<int>("ProductDetailsOpenCount")
                        .HasColumnType("integer");

                    b.Property<int>("ProductDetailsOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("elenora.Models.Horoscope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DateRange")
                        .HasColumnType("text");

                    b.Property<string>("IdString")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Horoscopes");
                });

            modelBuilder.Entity("elenora.Models.HoroscopeBracelet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("BeadId")
                        .HasColumnType("integer");

                    b.Property<int>("HoroscopeId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BeadId");

                    b.HasIndex("HoroscopeId");

                    b.ToTable("HoroscopeBracelets");
                });

            modelBuilder.Entity("elenora.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdminRemark")
                        .HasColumnType("text");

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("integer");

                    b.Property<int?>("CouponId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("DifferentShippingAddress")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int?>("EmailAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("EmailSequenceStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastEmailSequenceSentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastPaymentRequestEmailDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OrderedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PackageTrackingNumber")
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentRequestEmailsSent")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("ShippingMethod")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CouponId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmailAddressId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("elenora.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasDiscriminator<string>("Discriminator").HasValue("OrderItem");
                });

            modelBuilder.Entity("elenora.Models.OrderItemComplementaryProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ComplementaryProductId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComplementaryProductId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemComplementaryProducts");
                });

            modelBuilder.Entity("elenora.Models.OrderPopupStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PopupActionExecutedCount")
                        .HasColumnType("integer");

                    b.Property<string>("PopupDisplayRemark")
                        .HasColumnType("text");

                    b.Property<int>("PopupDisplayedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("PopupId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PopupLastDisplayed")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PopupId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("elenora.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalTransactionId")
                        .HasColumnType("text");

                    b.Property<int>("FraudRiskScore")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("elenora.Models.Popup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Odds")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Popups");
                });

            modelBuilder.Entity("elenora.Models.ProductComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowOnProduct")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductComponents");
                });

            modelBuilder.Entity("elenora.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("elenora.Models.QuizResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Answer1")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Answer1Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Answer2")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Answer2Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Answer3")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Answer3Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Answer4")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Answer4Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Answer5")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Answer5Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Answer6")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Answer6Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("QuizName")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("elenora.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("elenora.Models.Testimonial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("IdString")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("elenora.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("elenora.Models.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("elenora.Models.BraceletCartItem", b =>
                {
                    b.HasBaseType("elenora.Models.CartItem");

                    b.Property<int?>("BraceletSize")
                        .HasColumnType("integer");

                    b.Property<int?>("BraceletSize2")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("BraceletCartItem");
                });

            modelBuilder.Entity("elenora.Models.CustomBraceletCartItem", b =>
                {
                    b.HasBaseType("elenora.Models.CartItem");

                    b.Property<int>("BeadTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("BraceletSize")
                        .HasColumnName("CustomBraceletCartItem_BraceletSize")
                        .HasColumnType("integer");

                    b.HasIndex("BeadTypeId");

                    b.HasDiscriminator().HasValue("CustomBraceletCartItem");
                });

            modelBuilder.Entity("elenora.Models.CustomTextBraceletCartItem", b =>
                {
                    b.HasBaseType("elenora.Models.CartItem");

                    b.Property<int?>("BraceletSize")
                        .HasColumnName("CustomTextBraceletCartItem_BraceletSize")
                        .HasColumnType("integer");

                    b.Property<string>("CustomText")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnName("CustomTextBraceletCartItem_ProductId")
                        .HasColumnType("integer");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("CustomTextBraceletCartItem");
                });

            modelBuilder.Entity("elenora.Models.BraceletOrderItem", b =>
                {
                    b.HasBaseType("elenora.Models.OrderItem");

                    b.Property<int?>("BraceletSize")
                        .HasColumnType("integer");

                    b.Property<int?>("BraceletSize2")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("BraceletOrderItem");
                });

            modelBuilder.Entity("elenora.Models.CustomBraceletOrderItem", b =>
                {
                    b.HasBaseType("elenora.Models.OrderItem");

                    b.Property<int>("BeadTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("BraceletSize")
                        .HasColumnName("CustomBraceletOrderItem_BraceletSize")
                        .HasColumnType("integer");

                    b.HasIndex("BeadTypeId");

                    b.HasDiscriminator().HasValue("CustomBraceletOrderItem");
                });

            modelBuilder.Entity("elenora.Models.CustomTextBraceletOrderItem", b =>
                {
                    b.HasBaseType("elenora.Models.OrderItem");

                    b.Property<int?>("BraceletSize")
                        .HasColumnName("CustomTextBraceletOrderItem_BraceletSize")
                        .HasColumnType("integer");

                    b.Property<string>("CustomText")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnName("CustomTextBraceletOrderItem_ProductId")
                        .HasColumnType("integer");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("CustomTextBraceletOrderItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("elenora.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("elenora.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("elenora.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("elenora.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("elenora.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.BusinessModels.Product", b =>
                {
                    b.HasOne("elenora.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.ActionLog", b =>
                {
                    b.HasOne("elenora.Models.Customer", "Customer")
                        .WithMany("ActionLogs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.BusinessModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("elenora.Models.BeadComplementaryProduct", b =>
                {
                    b.HasOne("elenora.Models.ComplementaryProduct", "ComplementaryProduct")
                        .WithMany()
                        .HasForeignKey("ComplementaryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.Component", "Component")
                        .WithMany("BeadComplementaryProducts")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.BraceletPreviewRequest", b =>
                {
                    b.HasOne("elenora.Models.Customer", "Customer")
                        .WithMany("BraceletPreviewRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.EmailAddress", "EmailAddress")
                        .WithMany("BraceletPreviewRequests")
                        .HasForeignKey("EmailAddressId");
                });

            modelBuilder.Entity("elenora.Models.Cart", b =>
                {
                    b.HasOne("elenora.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId");

                    b.HasOne("elenora.Models.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("elenora.Models.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.CartItem", b =>
                {
                    b.HasOne("elenora.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.CartItemComplementaryProduct", b =>
                {
                    b.HasOne("elenora.Models.CartItem", "CartItem")
                        .WithMany("CartItemComplementaryProducts")
                        .HasForeignKey("CartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.ComplementaryProduct", "ComplementaryProduct")
                        .WithMany()
                        .HasForeignKey("ComplementaryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.Component", b =>
                {
                    b.HasOne("elenora.Models.ComponentFamily", "ComponentFamily")
                        .WithMany("Components")
                        .HasForeignKey("ComponentFamilyId");
                });

            modelBuilder.Entity("elenora.Models.ComponentFamilyChakra", b =>
                {
                    b.HasOne("elenora.Models.Chakra", "Chakra")
                        .WithMany("ComponentFamilyChakras")
                        .HasForeignKey("ChakraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.ComponentFamily", "ComponentFamily")
                        .WithMany("ComponentFamilyChakras")
                        .HasForeignKey("ComponentFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.ComponentFamilyHoroscope", b =>
                {
                    b.HasOne("elenora.Models.ComponentFamily", "ComponentFamily")
                        .WithMany("ComponentFamilyHoroscopes")
                        .HasForeignKey("ComponentFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.Horoscope", "Horoscope")
                        .WithMany("ComponentFamilyHoroscopes")
                        .HasForeignKey("HoroscopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.CustomBraceletComponent", b =>
                {
                    b.HasOne("elenora.Models.CustomBraceletCartItem", "CartItem")
                        .WithMany("Components")
                        .HasForeignKey("CartItemId");

                    b.HasOne("elenora.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.CustomBraceletOrderItem", "OrderItem")
                        .WithMany("Components")
                        .HasForeignKey("OrderItemId");
                });

            modelBuilder.Entity("elenora.Models.Customer", b =>
                {
                    b.HasOne("elenora.Models.EmailAddress", "EmailAddress")
                        .WithMany("Customers")
                        .HasForeignKey("EmailAddressId");
                });

            modelBuilder.Entity("elenora.Models.CustomerPopupStats", b =>
                {
                    b.HasOne("elenora.Models.Customer", null)
                        .WithOne("CustomerPopupStats")
                        .HasForeignKey("elenora.Models.CustomerPopupStats", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.Popup", "Popup")
                        .WithMany()
                        .HasForeignKey("PopupId");
                });

            modelBuilder.Entity("elenora.Models.EmailHistory", b =>
                {
                    b.HasOne("elenora.Models.EmailAddress", "EmailAddress")
                        .WithMany("EmailHistories")
                        .HasForeignKey("EmailAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.EmailTemplate", "EmailTemplate")
                        .WithMany()
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.EmailLog", b =>
                {
                    b.HasOne("elenora.Models.EmailAddress", "EmailAddress")
                        .WithMany("EmailLogs")
                        .HasForeignKey("EmailAddressId");
                });

            modelBuilder.Entity("elenora.Models.EmailTemplate", b =>
                {
                    b.HasOne("elenora.Models.EmailTemplate", "OnlyAfterEmail")
                        .WithMany()
                        .HasForeignKey("OnlyAfterEmailId");
                });

            modelBuilder.Entity("elenora.Models.HoroscopeBracelet", b =>
                {
                    b.HasOne("elenora.Models.Component", "Bead")
                        .WithMany()
                        .HasForeignKey("BeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.Horoscope", "Horoscope")
                        .WithMany("HoroscopeBracelets")
                        .HasForeignKey("HoroscopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.Order", b =>
                {
                    b.HasOne("elenora.Models.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId");

                    b.HasOne("elenora.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.EmailAddress", "EmailAddress")
                        .WithMany("Orders")
                        .HasForeignKey("EmailAddressId");

                    b.HasOne("elenora.Models.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");
                });

            modelBuilder.Entity("elenora.Models.OrderItem", b =>
                {
                    b.HasOne("elenora.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.OrderItemComplementaryProduct", b =>
                {
                    b.HasOne("elenora.Models.ComplementaryProduct", "ComplementaryProduct")
                        .WithMany()
                        .HasForeignKey("ComplementaryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.OrderItem", "OrderItem")
                        .WithMany("OrderItemComplementaryProducts")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.OrderPopupStats", b =>
                {
                    b.HasOne("elenora.Models.Order", null)
                        .WithOne("OrderPopupStats")
                        .HasForeignKey("elenora.Models.OrderPopupStats", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.Models.Popup", "Popup")
                        .WithMany()
                        .HasForeignKey("PopupId");
                });

            modelBuilder.Entity("elenora.Models.Payment", b =>
                {
                    b.HasOne("elenora.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.ProductComponent", b =>
                {
                    b.HasOne("elenora.Models.Component", "Component")
                        .WithMany("ProductComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.BusinessModels.Product", "Product")
                        .WithMany("ProductComponents")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.QuizResult", b =>
                {
                    b.HasOne("elenora.Models.Customer", "Customer")
                        .WithMany("QuizResults")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.User", b =>
                {
                    b.HasOne("elenora.Models.Customer", "Customer")
                        .WithOne("User")
                        .HasForeignKey("elenora.Models.User", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.WishlistItem", b =>
                {
                    b.HasOne("elenora.Models.Customer", "Customer")
                        .WithMany("WishlistItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("elenora.BusinessModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.BraceletCartItem", b =>
                {
                    b.HasOne("elenora.BusinessModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.CustomBraceletCartItem", b =>
                {
                    b.HasOne("elenora.Models.Component", "BeadType")
                        .WithMany()
                        .HasForeignKey("BeadTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.CustomTextBraceletCartItem", b =>
                {
                    b.HasOne("elenora.BusinessModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.BraceletOrderItem", b =>
                {
                    b.HasOne("elenora.BusinessModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.CustomBraceletOrderItem", b =>
                {
                    b.HasOne("elenora.Models.Component", "BeadType")
                        .WithMany()
                        .HasForeignKey("BeadTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("elenora.Models.CustomTextBraceletOrderItem", b =>
                {
                    b.HasOne("elenora.BusinessModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
